#!/usr/bin/env python

import os
import sys
import subprocess

from collections import OrderedDict

COMMANDS = OrderedDict([
    ("ag",   "ag --silent --files-with-matches --case-sensitive --literal --nocolor -- '%s'"),
    ("rg",   "rg --files-with-matches --case-sensitive --fixed-strings --color=never -- '%s'"),
    ("grep", "grep --binary-files=without-match --files-with-matches --fixed-strings --color=never --recursive --exclude-dir='[.]git' '%s' . | cut -b3-"),
])

def read(file):
    with open(file, 'r') as f:
        return f.read()

def write(file, string):
    with open(file, 'w') as f:
        return f.write(string)

def run(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    stdout, _ = process.communicate()
    return stdout

def searcher(term):
    pathsep = ';' if os.name == 'nt' else ':'
    path = os.environ["PATH"].split(pathsep)
    for program, command in COMMANDS.items():
        for entry in path:
            if os.path.exists('/'.join([entry, program])):
                return command % term
    raise RuntimeError('Failed to infer appropriate search command')

def search(term):
    command = searcher(term)
    output = run(command)
    if isinstance(output, bytes):
        output = output.decode()
    return output.split('\n')

def transform(file):

    old = sys.argv[1]
    new = sys.argv[2]

    contents = read(file)
    splat = contents.split(old)
    count = len(splat) - 1
    replaced = new.join(splat)
    write(file, replaced)

    fmt = "%s: replaced %d occurence%s"
    msg = fmt % (file, count, '' if count == 1 else 's')
    print(msg)
    
def main():

    if len(sys.argv) != 3:
        print('Usage: replace [from] [to] < [files]')
        return 1

    tty = sys.stdin.isatty()
    files = search(sys.argv[1]) if tty else sys.stdin.read().split('\n')

    files = [file for file in files if len(file) != 0]
    if len(files) == 0 or files == ['']:
        print('no matches found')
        return 0

    for file in files:
        transform(file)

    return 0

if __name__ == '__main__':
    sys.exit(main())
