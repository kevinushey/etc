#!/usr/bin/env bash

## This script installs the latest R devel, using clang, the latest
## version of gfortran, and also OpenBLAS for faster matrix operations.
##
## NOTE: this script will install Homebrew, a Mac package manager,
## for easy downloading of gfortran, OpenBLAS, and LAPACK.
##
## NOTE: If you get weird linker errors related to `lapack` in grDevices
## on load, it's probably because you updated gcc / gfortran and now
## the lapack / openblas links are broken. You can either fix this
## manually with otool, or be lazy and just reinstall openblas and
## lapack (in that order).
##

## ----- CONFIGURATION VARIABLES ----- ##

# Installation-related
: ${PREFIX="${HOME}/r/r-homebrew"}
: ${SOURCEDIR="${HOME}/r/r-source"}          # checked out R sources will live here
: ${TMP="${HOME}/tmp"}                       # temporary dir used on installation
: ${ENABLE_R_FRAMEWORK="yes"}

## Compiler-specific
: ${CC="clang"}
: ${CXX="clang++"}
: ${CFLAGS="-g -O3 -Wall -pedantic"}
: ${CXXFLAGS="-g -O3 -Wall -pedantic"}
: ${FORTRAN="gfortran"}
: ${FFLAGS="-g -O3"} 
: ${OBJC="clang"}
: ${OBJCFLAGS="${CFLAGS}"}
: ${MAKE="make"}
: ${MAKEFLAGS="-j10"}
: ${MAIN_LD="clang"}

## ----- END CONFIGURATION VARIABLES ----- ##

## detect whether we want to build with a framework
echo "> Prefix: ${PREFIX}"
if [ "${ENABLE_R_FRAMEWORK}" = "yes" ]; then
    echo "> R Framework: ENABLED"
    R_FRAMEWORK="--enable-R-framework"
else
    echo "> R Framework: DISABLED"
    R_FRAMEWORK="--disable-R-framework"
fi

OWD=`pwd`

## check if homebrew is installed
echo "Checking for Homebrew..."
if command -v brew &> /dev/null; then
    echo "> Homebrew already installed."
else
    echo "> Installing homebrew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

export TMP=${TMP}
mkdir -p ${TMP}

missing () {
    if ! test -z `brew list --formula | grep ^$1$`; then
        echo 1
    fi
}

install () {
    if test -z `missing $1`; then
        brew install $@
    fi
}

## make sure we have the necessary taps
brew tap homebrew/science 2> /dev/null
brew tap homebrew/dupes   2> /dev/null

## use homebrew to install openblas, lapack, gfortran

install gcc        # gfortran
install openblas   # faster BLAS
install lapack     # latest lapack
install texinfo    # vignettes, help
install coreutils  # greadlink
install jpeg       # image write support
install cairo      # image write support

## Make sure the gfortran libraries get symlinked.
if command -v gfortran &> /dev/null; then
    GFORTRAN=gfortran
fi

GFORTRAN_SEARCH_PATHS_STRING=`"${GFORTRAN}" -print-search-dirs | tail -n 1 | sed 's|.*=||'`
IFS=':' read -a GFORTRAN_SEARCH_PATHS <<< "${GFORTRAN_SEARCH_PATHS_STRING}"
for FILEPATH in "${GFORTRAN_SEARCH_PATHS[@]}"; do
    if test -e "${FILEPATH}/libgfortran.dylib"; then
        echo -e "Found gfortran libraries in:\n${FILEPATH}"
        GFORTRAN_LIBPATH=`greadlink -f "${FILEPATH}"`
    fi
done

if test -z "${GFORTRAN_LIBPATH}"; then
    echo Failed to discover 'gfortran' library paths
    exit 1
fi

for FILEPATH in ${GFORTRAN_LIBPATH}/libgfortran*; do
    BASENAME=${FILEPATH##*/}
    LINKEDPATH=/usr/local/lib/${BASENAME}
    echo Symlinking \'${BASENAME}\' to \'${LINKEDPATH}\'
    ln -fs "${FILEPATH}" "${LINKEDPATH}"
done

## Download R-devel from SVN
mkdir -p "${SOURCEDIR}" &> /dev/null
cd "${SOURCEDIR}"
echo "Checking out latest R..."
svn checkout https://svn.r-project.org/R/trunk/
cd trunk

## After downloading the R sources you should also download
## the recommended packages by entering the R source tree and running
echo "Syncing recommended R packages..."
./tools/rsync-recommended

## This was needed for building some applications that included
## 'Rinterface.h' in multiple translation units (we were encountering
## linker errors)
if test -n "`grep "^int R_running_as_main_program" src/include/Rinterface.h`"; then
    echo "Adding a missing extern in 'Rinterface.h'..."
    sed -i '' 's/^int R_running_as_main_program/extern int R_running_as_main_program/g' src/include/Rinterface.h
fi

## For some reason, there is trouble in locating Homebrew Cairo;
## we have to make sure pkg-config looks in the right place
export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig

## modify config.site so that it gets the appropriate compilers etc
cat > config.site <<- EOM
CC="${CC}"
CFLAGS="${CFLAGS}"
CXX="${CXX}"
CXXFLAGS="${CXXFLAGS}"
F77="${FORTRAN}"
FFLAGS="${FFLAGS}"
FC="${FORTRAN}"
FCFLAGS="${FFLAGS}"
OBJC="${OBJC}"
OBJCFLAGS="${OBJCFLAGS}"
MAKE="${MAKE}"
MAKEFLAGS="${MAKEFLAGS}"
MAIN_LD="${MAIN_LD}"
EOM

make distclean
make clean

## configure
./configure                                                \
    --with-blas="-L/usr/local/opt/openblas/lib -lopenblas" \
    --with-lapack="-L/usr/local/opt/lapack/lib -llapack"   \
    --with-cairo                                           \
    --with-readline                                        \
    ${R_FRAMEWORK}                                         \
    --enable-R-shlib                                       \
    --enable-R-profiling                                   \
    --enable-memory-profiling                              \
    --with-valgrind-instrumentation=2                      \
    --without-internal-tzcode                              \
    --without-recommended-packages                         \
    --x-libraries=/opt/X11/lib                             \
    --x-includes=/opt/X11/include                          \
    --prefix="${PREFIX}"                                   \
    "$@"

STATUS="$?"
if [ "${STATUS}" -ne 0 ]; then
    echo 'Configure failed!'
    exit "${STATUS}"
fi

if [ -n "${CONFIGURE_ONLY}" ]; then
    exit 0
fi

make -j10 |& tee compile.log || {
    echo 'Make failed!'
    exit 1
}

mkdir -p "${PREFIX}"
if [ -d "${PREFIX}" ] && [ -w "${PREFIX}" ]; then
    INSTALL="make install"
else
    INSTALL="sudo make install"
fi

${INSTALL} || {
    echo "Installation failed!"
    exit 1
}

echo 'Installation completed successfully!'
cd ${OWD}

