#!/usr/bin/env bash

set -e

if [ "$#" -eq "0" ]; then
	echo "Usage: $0 [--version version] [--url url] [--devel] [--sanitizers]"
	exit 0
fi

while [ "$#" -ne "0" ]; do

	case "$1" in

	--url)
		URL="$2"
		shift
	;;

	--version)
		VERSION="$2"
		shift
	;;

	--devel)
		DEVEL=1
	;;

	--sanitizers)
		SANITIZERS=1
	;;

	--)
		shift
		break
	;;

	*)
		echo "unknown argument '$1'"
	;;

	esac

	shift

done

# Move to temporary directory.
OWD="${PWD}"
cd "${TMPDIR-/tmp}"

if [ -z "${DEVEL}" ]; then

	# If we don't have a URL, construct it from the
	# user-provided version.
	if [ -z "${URL}" ] && [ -n "${VERSION}" ]; then
		VERSION_MAJOR="$(echo "${VERSION}" | cut -d'.' -f1)"
		VERSION_MINOR="$(echo "${VERSION}" | cut -d'.' -f2)"
		URL="https://cran.r-project.org/src/base/R-${VERSION_MAJOR}/R-${VERSION}.tar.gz"
	fi

	# If we still don't have a URL, bail.
	if [ -z "${URL}" ]; then
		echo "ERROR: No R version or URL was specified"
		exit 1
	fi

	# Download and unpack the requested tarball.
	TARBALL="$(basename -- ${URL})"
	curl -L -f -C - "${URL}" -o "${TARBALL}"

	# Extract the sources.
	FOLDER="$(tar tzf "${TARBALL}" | head -1)"
	tar xzf "${TARBALL}"
	cd "${FOLDER}"

else

	# Check out R sources
	mkdir -p ~/r/r-source
	svn checkout https://svn.r-project.org/R/trunk/ ~/r/r-source/trunk
	cd ~/r/r-source/trunk

fi

# Make sure we have recommended packages available.
./tools/rsync-recommended

# For development versions of R, figure out VERSION from
# the unpacked tarball. Otherwise, figure it out from
# the version file.
if [ -n "${DEVEL}" ]; then
	SVN_REVISION=$(svn info | grep "Revision" | awk '{print $2}')
	VERSION="r${SVN_REVISION}"
else
	VERSION="$(cat VERSION | cut -d' ' -f1)"
fi

# Add -asan suffix for sanitizer builds.
if [ -n "${SANITIZERS}" ]; then
	VERSION="${VERSION}-sanitizers"
fi

# Save sources folder.
SOURCES=$(pwd)
echo "Using sources folder: ${SOURCES}"
echo "Press Enter when you are ready to proceeed."
read

# Construct prefix path.
PREFIX="/opt/R/${VERSION}"

# If we're building with sanitizers, then modify CC and CFLAGS.
if [ -n "${SANITIZERS}" ]; then
	cat <<- EOF > config.site
	CPPFLAGS="-fsanitize=address -fsanitize-recover=all -fno-omit-frame-pointer"
	FC="gfortran -fsanitize=address -fsanitize-recover=all"
	MAIN_LDFLAGS="-fsanitize=address"
	EOF
else
	cat <<- EOF > config.site
	CPPFLAGS="-g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -fstack-protector-strong"
	EOF
fi

# Move to temporary directory for building.
BUILD=$(mktemp -d)
cd "${BUILD}"

"${SOURCES}/configure"                \
	--prefix="${PREFIX}"              \
	--enable-R-shlib                  \
	--enable-R-profiling              \
	--enable-memory-profiling         \
	--with-valgrind-instrumentation=2 \
	--with-blas                       \
	--with-lapack                     \
	"$@"

make -j$(getconf _NPROCESSORS_ONLN)
sudo make install

# For development builds of R, use a separate user library path.
if [ -n "${DEVEL}" ]; then
	mkdir -p ~/.R/library/${VERSION}
	LINE="R_LIBS_USER='~/.R/library/${VERSION}'"
	ETCDIR=$("${PREFIX}/bin/R" -s -e "writeLines(R.home(\"etc\"))")
	echo "$LINE" | sudo tee -a "${ETCDIR}/Renviron.site"
fi

# Go home.
cd "${OWD}"
rm -rf "${BUILD}"

